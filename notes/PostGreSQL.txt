<interesting python packages>
bcpandas
pandas-datareader

<SQL>
PostgreSql
	1. Test with different col types
	
	-- drop table
	DROP TABLE IF EXISTS foo
	
	-- create table
	CREATE TABLE foo
	(
		name varchar(10) NOT NULL,
		age  int,
		dob  date,
		value decimal,
		seq serial,
		ts timestamp,
		js json,
		jsb jsonb,
		metadata varchar(5)[],
		moremetadata varchar(5)[3]	
	)
	-- get character encoding
	SHOW SERVER_ENCODING
	
	-- getting timestamps
	select current_timestamp,localtimestamp

	-- add some data
	INSERT INTO foo (name, age, dob, value, ts, js, jsb, metadata, moremetadata)
	VALUES
	('Name',32, '2020-03-20', 13.00, localtimestamp, '{ "foo" : "bar", "inner": {"more" : "foo"}}','{ "foo" : "bar", "inner": {"more" : "foo"}}', '{"a","b","c"}', '{"aa","bb"}')
	
	-- arrays all, first, first two, second and third, last
	SELECT metadata, metadata[1], metadata[1:2], metadata[2:3] , metadata[array_upper(metadata, 1)] FROM foo
	-- json
 	SELECT js->'inner'-> 'more' asJson, js->'inner'->>'more' asTxt FROM foo
	-- version
	SELECT version()


<pyodbc->PostgreSQL: Returns json and arrays as 'strings'>
import pyodbc
conn_str = (\
    "DRIVER={PostgreSQL ANSI};"\
    "DATABASE=postgres;"\
    "UID=postgres;"\
    "PWD=*secret*;"\
    "SERVER=localhost;"\
    "PORT=5432;"\
    )
conn = pyodbc.connect(conn_str)
crsr = conn.execute("SELECT * FROM FOO limit 50")
row = crsr.fetchone()
print(row)
crsr.close()
conn.close()

<SQLAlchemy->PostgreSQL : Works correctly with json (->map) and arrays (->list) >
import sqlalchemy
conn_str="postgresql+psycopg2://postgres:*secret*@localhost/postgres"
engine = sqlalchemy.create_engine(conn_str)
conn=engine.connect()
result=conn.execute('SELECT * FROM Foo')
result.keys()
for r in result:
    print(r)
    for i in r:
        print(type(i))
		
<SQLAlchemy->PostgreSQL : Works correctly with json and arrays>
import sqlalchemy
conn_str="postgresql://postgres:*secret*@localhost/postgres"
engine = sqlalchemy.create_engine(conn_str)
conn=engine.connect()
result=conn.execute('SELECT * FROM Foo')
result.keys()
for r in result:
    print(r)
    for i in r:
        print(type(i))

<SQLAlchemy->PostgreSQL : Works correctly with json and arrays>		
import sqlalchemy
conn_str="postgresql+pg8000//postgres:*secret*@localhost/postgres"
engine = sqlalchemy.create_engine(conn_str)
conn=engine.connect()
result=conn.execute('SELECT * FROM Foo')
result.keys()
for r in result:
    print(r)
    for i in r:
        print(type(i))